// <auto-generated />
using System;
using ExpertMed.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ExpertMed.Migrations
{
    [DbContext(typeof(DbExpertmedContext))]
    [Migration("20250126221526_pacientes")]
    partial class pacientes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ExpertMed.Models.AllergiesConsultation", b =>
                {
                    b.Property<int>("AllergiesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("allergies_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AllergiesId"));

                    b.Property<int>("AllergiesCatalogid")
                        .HasColumnType("int")
                        .HasColumnName("allergies_catalogid");

                    b.Property<int?>("AllergiesConsultationid")
                        .HasColumnType("int")
                        .HasColumnName("allergies_consultationid");

                    b.Property<DateTime?>("AllergiesCreationdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("allergies_creationdate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("AllergiesObservation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("allergies_observation");

                    b.Property<int?>("AllergiesStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("allergies_status");

                    b.HasKey("AllergiesId")
                        .HasName("PK__allergie__1079FBD0C0A411FA");

                    b.HasIndex("AllergiesCatalogid");

                    b.HasIndex("AllergiesConsultationid");

                    b.ToTable("allergies_consultation", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.Appointment", b =>
                {
                    b.Property<int>("AppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("appointment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AppointmentId"));

                    b.Property<int?>("AppointmentConsultationid")
                        .HasColumnType("int")
                        .HasColumnName("appointment_consultationid");

                    b.Property<DateTime?>("AppointmentCreatedate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("appointment_createdate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("AppointmentCreateuser")
                        .HasColumnType("int")
                        .HasColumnName("appointment_createuser");

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime")
                        .HasColumnName("appointment_date");

                    b.Property<TimeOnly>("AppointmentHour")
                        .HasColumnType("time")
                        .HasColumnName("appointment_hour");

                    b.Property<DateTime?>("AppointmentModifydate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("appointment_modifydate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("AppointmentModifyuser")
                        .HasColumnType("int")
                        .HasColumnName("appointment_modifyuser");

                    b.Property<int?>("AppointmentPatientid")
                        .HasColumnType("int")
                        .HasColumnName("appointment_patientid");

                    b.Property<int?>("AppointmentStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("appointment_status");

                    b.HasKey("AppointmentId")
                        .HasName("PK__appointm__A50828FCE9ED1661");

                    b.HasIndex("AppointmentConsultationid");

                    b.HasIndex("AppointmentCreateuser");

                    b.HasIndex("AppointmentModifyuser");

                    b.HasIndex("AppointmentPatientid");

                    b.ToTable("appointment", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.AssistantDoctorRelationship", b =>
                {
                    b.Property<int>("AssistandoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assistandoctor_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssistandoctorId"));

                    b.Property<int?>("AssistantUserid")
                        .HasColumnType("int")
                        .HasColumnName("assistant_userid");

                    b.Property<DateTime?>("AssitandoctorDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("assitandoctor_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("DoctorUserid")
                        .HasColumnType("int")
                        .HasColumnName("doctor_userid");

                    b.Property<int>("RelationshipStatus")
                        .HasColumnType("int")
                        .HasColumnName("relationship_status");

                    b.HasKey("AssistandoctorId")
                        .HasName("PK__assistan__017A7BA914D54344");

                    b.HasIndex("AssistantUserid");

                    b.HasIndex("DoctorUserid");

                    b.ToTable("assistant_doctor_relationship", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.Catalog", b =>
                {
                    b.Property<int>("CatalogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("catalog_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CatalogId"));

                    b.Property<string>("CatalogCategory")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("catalog_category");

                    b.Property<string>("CatalogName")
                        .IsRequired()
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)")
                        .HasColumnName("catalog_name");

                    b.Property<int?>("CategoryStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("category_status");

                    b.HasKey("CatalogId")
                        .HasName("PK__catalogs__9871D9500A81A69B");

                    b.ToTable("catalogs", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.Consultation", b =>
                {
                    b.Property<int>("ConsultationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("consultation_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultationId"));

                    b.Property<string>("ConsultationBloodpressuredAs")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("consultation_bloodpressuredAS");

                    b.Property<string>("ConsultationBloodpresuredDis")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("consultation_bloodpresuredDIS");

                    b.Property<DateTime?>("ConsultationCreationdate")
                        .HasColumnType("datetime")
                        .HasColumnName("consultation_creationdate");

                    b.Property<int?>("ConsultationDisablilitydays")
                        .HasColumnType("int")
                        .HasColumnName("consultation_disablilitydays");

                    b.Property<string>("ConsultationDisease")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("consultation_disease");

                    b.Property<string>("ConsultationFamiliaryname")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("consultation_familiaryname");

                    b.Property<string>("ConsultationFamiliaryphone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("consultation_familiaryphone");

                    b.Property<int?>("ConsultationFamiliarytype")
                        .HasColumnType("int")
                        .HasColumnName("consultation_familiarytype");

                    b.Property<string>("ConsultationHistoryclinic")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("consultation_historyclinic");

                    b.Property<string>("ConsultationNonpharmacologycal")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("consultation_nonpharmacologycal");

                    b.Property<string>("ConsultationObservation")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("consultation_observation");

                    b.Property<int>("ConsultationPatient")
                        .HasColumnType("int")
                        .HasColumnName("consultation_patient");

                    b.Property<string>("ConsultationPersonalbackground")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("consultation_personalbackground");

                    b.Property<string>("ConsultationPulse")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("consultation_pulse");

                    b.Property<string>("ConsultationReason")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("consultation_reason");

                    b.Property<string>("ConsultationRespirationrate")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("consultation_respirationrate");

                    b.Property<int?>("ConsultationSequential")
                        .HasColumnType("int")
                        .HasColumnName("consultation_sequential");

                    b.Property<string>("ConsultationSize")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("consultation_size");

                    b.Property<int?>("ConsultationSpeciality")
                        .HasColumnType("int")
                        .HasColumnName("consultation_speciality");

                    b.Property<int?>("ConsultationStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("consultation_status");

                    b.Property<string>("ConsultationTemperature")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("consultation_temperature");

                    b.Property<string>("ConsultationTreatmentplan")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("consultation_treatmentplan");

                    b.Property<int?>("ConsultationType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("consultation_type");

                    b.Property<int?>("ConsultationUsercreate")
                        .HasColumnType("int")
                        .HasColumnName("consultation_usercreate");

                    b.Property<string>("ConsultationWarningsings")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("consultation_warningsings");

                    b.Property<string>("ConsultationWeight")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)")
                        .HasColumnName("consultation_weight");

                    b.HasKey("ConsultationId")
                        .HasName("PK__consulta__650FE0FB3271D9FB");

                    b.HasIndex("ConsultationPatient");

                    b.HasIndex("ConsultationSpeciality");

                    b.HasIndex("ConsultationUsercreate");

                    b.ToTable("consultation", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("country_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("CountryCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("country_code");

                    b.Property<string>("CountryIso")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("country_iso");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("country_name");

                    b.Property<string>("CountryNationality")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("country_nationality");

                    b.Property<int?>("CountryStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("country_status");

                    b.HasKey("CountryId")
                        .HasName("PK__countrie__7E8CD055511F6D94");

                    b.ToTable("countries", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.Diagnosis", b =>
                {
                    b.Property<int>("DiagnosisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("diagnosis_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnosisId"));

                    b.Property<string>("DiagnosisCategory")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("diagnosis_category");

                    b.Property<string>("DiagnosisCie10")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("diagnosis_cie10");

                    b.Property<string>("DiagnosisDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("diagnosis_description");

                    b.Property<string>("DiagnosisName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("diagnosis_name");

                    b.Property<int?>("DiagnosisStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("diagnosis_status");

                    b.HasKey("DiagnosisId")
                        .HasName("PK__diagnosi__D49E32B47AF704DC");

                    b.ToTable("diagnosis", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.DiagnosisConsultation", b =>
                {
                    b.Property<int>("DiagnosisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("diagnosis_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiagnosisId"));

                    b.Property<int?>("DiagnosisConsultationid")
                        .HasColumnType("int")
                        .HasColumnName("diagnosis_consultationid");

                    b.Property<bool?>("DiagnosisDefinitive")
                        .HasColumnType("bit")
                        .HasColumnName("diagnosis_definitive");

                    b.Property<int?>("DiagnosisDiagnosisid")
                        .HasColumnType("int")
                        .HasColumnName("diagnosis_diagnosisid");

                    b.Property<string>("DiagnosisObservation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("diagnosis_observation");

                    b.Property<bool?>("DiagnosisPresumptive")
                        .HasColumnType("bit")
                        .HasColumnName("diagnosis_presumptive");

                    b.Property<int?>("DiagnosisSequential")
                        .HasColumnType("int")
                        .HasColumnName("diagnosis_sequential");

                    b.Property<int?>("DiagnosisStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("diagnosis_status");

                    b.HasKey("DiagnosisId")
                        .HasName("PK__diagnosi__D49E32B460371B2B");

                    b.HasIndex("DiagnosisConsultationid");

                    b.HasIndex("DiagnosisDiagnosisid");

                    b.ToTable("diagnosis_consultation", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.DoctorPatient", b =>
                {
                    b.Property<int>("DoctorPatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("doctor_patient_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorPatientId"));

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("creation_date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DoctorUserid")
                        .HasColumnType("int")
                        .HasColumnName("doctor_userid");

                    b.Property<int>("PatientId")
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    b.Property<int>("RelationshipStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("relationship_status");

                    b.HasKey("DoctorPatientId")
                        .HasName("PK__doctor_p__ED861B137F1430D0");

                    b.HasIndex("DoctorUserid");

                    b.HasIndex("PatientId");

                    b.ToTable("doctor_patient", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.FamiliaryBackground", b =>
                {
                    b.Property<int>("FamiliaryBackgroundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("familiary_background_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FamiliaryBackgroundId"));

                    b.Property<bool?>("FamiliaryBackgroundCancer")
                        .HasColumnType("bit")
                        .HasColumnName("familiary_background_cancer");

                    b.Property<string>("FamiliaryBackgroundCancerObservation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("familiary_background_cancer_observation");

                    b.Property<int?>("FamiliaryBackgroundConsultationid")
                        .HasColumnType("int")
                        .HasColumnName("familiary_background_consultationid");

                    b.Property<bool?>("FamiliaryBackgroundDiabetes")
                        .HasColumnType("bit")
                        .HasColumnName("familiary_background_diabetes");

                    b.Property<string>("FamiliaryBackgroundDiabetesObservation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("familiary_background_diabetes_observation");

                    b.Property<bool?>("FamiliaryBackgroundDxcardiovascular")
                        .HasColumnType("bit")
                        .HasColumnName("familiary_background_dxcardiovascular");

                    b.Property<string>("FamiliaryBackgroundDxcardiovascularObservation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("familiary_background_dxcardiovascular_observation");

                    b.Property<bool?>("FamiliaryBackgroundDxinfectious")
                        .HasColumnType("bit")
                        .HasColumnName("familiary_background_dxinfectious");

                    b.Property<string>("FamiliaryBackgroundDxinfectiousObservation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("familiary_background_dxinfectious_observation");

                    b.Property<bool?>("FamiliaryBackgroundDxmental")
                        .HasColumnType("bit")
                        .HasColumnName("familiary_background_dxmental");

                    b.Property<string>("FamiliaryBackgroundDxmentalObservation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("familiary_background_dxmental_observation");

                    b.Property<bool?>("FamiliaryBackgroundHeartdisease")
                        .HasColumnType("bit")
                        .HasColumnName("familiary_background_heartdisease");

                    b.Property<string>("FamiliaryBackgroundHeartdiseaseObservation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("familiary_background_heartdisease_observation");

                    b.Property<bool?>("FamiliaryBackgroundHypertension")
                        .HasColumnType("bit")
                        .HasColumnName("familiary_background_hypertension");

                    b.Property<string>("FamiliaryBackgroundHypertensionObservation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("familiary_background_hypertension_observation");

                    b.Property<bool?>("FamiliaryBackgroundMalformation")
                        .HasColumnType("bit")
                        .HasColumnName("familiary_background_malformation");

                    b.Property<string>("FamiliaryBackgroundMalformationObservation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("familiary_background_malformation_observation");

                    b.Property<bool?>("FamiliaryBackgroundOther")
                        .HasColumnType("bit")
                        .HasColumnName("familiary_background_other");

                    b.Property<string>("FamiliaryBackgroundOtherObservation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("familiary_background_other_observation");

                    b.Property<int?>("FamiliaryBackgroundRelatshTuberculosis")
                        .HasColumnType("int")
                        .HasColumnName("familiary_background_relatsh_tuberculosis");

                    b.Property<int?>("FamiliaryBackgroundRelatshcatalogCancer")
                        .HasColumnType("int")
                        .HasColumnName("familiary_background_relatshcatalog_cancer");

                    b.Property<int?>("FamiliaryBackgroundRelatshcatalogDiabetes")
                        .HasColumnType("int")
                        .HasColumnName("familiary_background_relatshcatalog_diabetes");

                    b.Property<int?>("FamiliaryBackgroundRelatshcatalogDxcardiovascular")
                        .HasColumnType("int")
                        .HasColumnName("familiary_background_relatshcatalog_dxcardiovascular");

                    b.Property<int?>("FamiliaryBackgroundRelatshcatalogDxinfectious")
                        .HasColumnType("int")
                        .HasColumnName("familiary_background_relatshcatalog_dxinfectious");

                    b.Property<int?>("FamiliaryBackgroundRelatshcatalogDxmental")
                        .HasColumnType("int")
                        .HasColumnName("familiary_background_relatshcatalog_dxmental");

                    b.Property<int?>("FamiliaryBackgroundRelatshcatalogHeartdisease")
                        .HasColumnType("int")
                        .HasColumnName("familiary_background_relatshcatalog_heartdisease");

                    b.Property<int?>("FamiliaryBackgroundRelatshcatalogHypertension")
                        .HasColumnType("int")
                        .HasColumnName("familiary_background_relatshcatalog_hypertension");

                    b.Property<int?>("FamiliaryBackgroundRelatshcatalogMalformation")
                        .HasColumnType("int")
                        .HasColumnName("familiary_background_relatshcatalog_malformation");

                    b.Property<int?>("FamiliaryBackgroundRelatshcatalogOther")
                        .HasColumnType("int")
                        .HasColumnName("familiary_background_relatshcatalog_other");

                    b.Property<bool?>("FamiliaryBackgroundTuberculosis")
                        .HasColumnType("bit")
                        .HasColumnName("familiary_background_tuberculosis");

                    b.Property<string>("FamiliaryBackgroundTuberculosisObservation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("familiary_background_tuberculosis_observation");

                    b.HasKey("FamiliaryBackgroundId")
                        .HasName("PK__familiar__79624F3D4D02A2A7");

                    b.HasIndex("FamiliaryBackgroundConsultationid");

                    b.HasIndex("FamiliaryBackgroundRelatshTuberculosis");

                    b.HasIndex("FamiliaryBackgroundRelatshcatalogCancer");

                    b.HasIndex("FamiliaryBackgroundRelatshcatalogDiabetes");

                    b.HasIndex("FamiliaryBackgroundRelatshcatalogDxcardiovascular");

                    b.HasIndex("FamiliaryBackgroundRelatshcatalogDxinfectious");

                    b.HasIndex("FamiliaryBackgroundRelatshcatalogDxmental");

                    b.HasIndex("FamiliaryBackgroundRelatshcatalogHeartdisease");

                    b.HasIndex("FamiliaryBackgroundRelatshcatalogHypertension");

                    b.HasIndex("FamiliaryBackgroundRelatshcatalogMalformation");

                    b.HasIndex("FamiliaryBackgroundRelatshcatalogOther");

                    b.ToTable("familiary_background", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.Image", b =>
                {
                    b.Property<int>("ImagesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("images_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImagesId"));

                    b.Property<string>("ImagesCategory")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("images_category");

                    b.Property<string>("ImagesCie10")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("images_cie10");

                    b.Property<string>("ImagesDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("images_description");

                    b.Property<string>("ImagesName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("images_name");

                    b.Property<int?>("ImagesStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("images_status");

                    b.HasKey("ImagesId")
                        .HasName("PK__images__FA2651F7ADED15C4");

                    b.ToTable("images", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.ImagesConsutlation", b =>
                {
                    b.Property<int>("ImagesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("images_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImagesId"));

                    b.Property<string>("ImagesAmount")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("images_amount");

                    b.Property<int?>("ImagesConsultationid")
                        .HasColumnType("int")
                        .HasColumnName("images_consultationid");

                    b.Property<int?>("ImagesImagesid")
                        .HasColumnType("int")
                        .HasColumnName("images_imagesid");

                    b.Property<string>("ImagesObservation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("images_observation");

                    b.Property<int?>("ImagesSequential")
                        .HasColumnType("int")
                        .HasColumnName("images_sequential");

                    b.Property<int?>("ImagesStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("images_status");

                    b.HasKey("ImagesId")
                        .HasName("PK__images_c__FA2651F7014D3056");

                    b.HasIndex("ImagesConsultationid");

                    b.HasIndex("ImagesImagesid");

                    b.ToTable("images_consutlation", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.LaboratoriesConsultation", b =>
                {
                    b.Property<int>("LaboratoriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("laboratories_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LaboratoriesId"));

                    b.Property<string>("LaboratoriesAmount")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("laboratories_amount");

                    b.Property<int?>("LaboratoriesConsultationid")
                        .HasColumnType("int")
                        .HasColumnName("laboratories_consultationid");

                    b.Property<int?>("LaboratoriesLaboratoriesid")
                        .HasColumnType("int")
                        .HasColumnName("laboratories_laboratoriesid");

                    b.Property<string>("LaboratoriesObservation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("laboratories_observation");

                    b.Property<int?>("LaboratoriesSequential")
                        .HasColumnType("int")
                        .HasColumnName("laboratories_sequential");

                    b.Property<int?>("LaboratoriesStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("laboratories_status");

                    b.HasKey("LaboratoriesId")
                        .HasName("PK__laborato__949BB03979F91D77");

                    b.HasIndex("LaboratoriesConsultationid");

                    b.HasIndex("LaboratoriesLaboratoriesid");

                    b.ToTable("laboratories_consultation", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.Laboratory", b =>
                {
                    b.Property<int>("LaboratoriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("laboratories_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LaboratoriesId"));

                    b.Property<string>("LaboratoriesCategory")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("laboratories_category");

                    b.Property<string>("LaboratoriesCie10")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("laboratories_cie10");

                    b.Property<string>("LaboratoriesDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("laboratories_description");

                    b.Property<string>("LaboratoriesName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("laboratories_name");

                    b.Property<int?>("LaboratoriesStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("laboratories_status");

                    b.HasKey("LaboratoriesId")
                        .HasName("PK__laborato__949BB039323204CF");

                    b.ToTable("laboratories", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.Medication", b =>
                {
                    b.Property<int>("MedicationsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("medications_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationsId"));

                    b.Property<string>("MedicationsCategory")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("medications_category");

                    b.Property<string>("MedicationsCie10")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("medications_cie10");

                    b.Property<string>("MedicationsConcentration")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("medications_concentration");

                    b.Property<string>("MedicationsDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("medications_description");

                    b.Property<string>("MedicationsDistinctive")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("medications_distinctive");

                    b.Property<string>("MedicationsName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("medications_name");

                    b.Property<int?>("MedicationsStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("medications_status");

                    b.HasKey("MedicationsId")
                        .HasName("PK__medicati__CF638DC5C2A78939");

                    b.ToTable("medications", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.MedicationsConsultation", b =>
                {
                    b.Property<int>("MedicationsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("medications_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MedicationsId"));

                    b.Property<string>("MedicationsAmount")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("medications_amount");

                    b.Property<int?>("MedicationsConsultationid")
                        .HasColumnType("int")
                        .HasColumnName("medications_consultationid");

                    b.Property<int?>("MedicationsMedicationsid")
                        .HasColumnType("int")
                        .HasColumnName("medications_medicationsid");

                    b.Property<string>("MedicationsObservation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("medications_observation");

                    b.Property<int?>("MedicationsSequential")
                        .HasColumnType("int")
                        .HasColumnName("medications_sequential");

                    b.Property<int?>("MedicationsStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("medications_status");

                    b.HasKey("MedicationsId")
                        .HasName("PK__medicati__CF638DC5DB142D75");

                    b.HasIndex("MedicationsConsultationid");

                    b.HasIndex("MedicationsMedicationsid");

                    b.ToTable("medications_consultation", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.OrgansSystem", b =>
                {
                    b.Property<int>("OrganssystemsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("organssystems_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrganssystemsId"));

                    b.Property<bool?>("OrganssystemsCardiovascular")
                        .HasColumnType("bit")
                        .HasColumnName("organssystems_cardiovascular");

                    b.Property<string>("OrganssystemsCardiovascularObs")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("organssystems_cardiovascular_obs");

                    b.Property<int?>("OrganssystemsConsultationid")
                        .HasColumnType("int")
                        .HasColumnName("organssystems_consultationid");

                    b.Property<bool?>("OrganssystemsDigestive")
                        .HasColumnType("bit")
                        .HasColumnName("organssystems_digestive");

                    b.Property<string>("OrganssystemsDigestiveObs")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("organssystems_digestive_obs");

                    b.Property<string>("OrganssystemsEndocrine")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("organssystems_endocrine");

                    b.Property<bool?>("OrganssystemsEndrocrine")
                        .HasColumnType("bit")
                        .HasColumnName("organssystems_endrocrine");

                    b.Property<bool?>("OrganssystemsGenital")
                        .HasColumnType("bit")
                        .HasColumnName("organssystems_genital");

                    b.Property<string>("OrganssystemsGenitalObs")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("organssystems_genital_obs");

                    b.Property<bool?>("OrganssystemsLymphatic")
                        .HasColumnType("bit")
                        .HasColumnName("organssystems_lymphatic");

                    b.Property<string>("OrganssystemsLymphaticObs")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("organssystems_lymphatic_obs");

                    b.Property<bool?>("OrganssystemsNervous")
                        .HasColumnType("bit")
                        .HasColumnName("organssystems_nervous");

                    b.Property<string>("OrganssystemsNervousObs")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("organssystems_nervous_obs");

                    b.Property<bool?>("OrganssystemsRespiratory")
                        .HasColumnType("bit")
                        .HasColumnName("organssystems_respiratory");

                    b.Property<string>("OrganssystemsRespiratoryObs")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("organssystems_respiratory_obs");

                    b.Property<bool?>("OrganssystemsSkeletalM")
                        .HasColumnType("bit")
                        .HasColumnName("organssystems_skeletal_m");

                    b.Property<string>("OrganssystemsSkeletalMObs")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("organssystems_skeletal_m_obs");

                    b.Property<bool?>("OrganssystemsUrinary")
                        .HasColumnType("bit")
                        .HasColumnName("organssystems_urinary");

                    b.Property<string>("OrganssystemsUrinaryObs")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("organssystems_urinary_obs");

                    b.HasKey("OrganssystemsId")
                        .HasName("PK__organs_s__FEA205F7088992C8");

                    b.HasIndex("OrganssystemsConsultationid");

                    b.ToTable("organs_systems", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.Patient", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("patient_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("DoctorName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PatientAddress")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("patient_address");

                    b.Property<int?>("PatientAge")
                        .HasColumnType("int")
                        .HasColumnName("patient_age");

                    b.Property<DateOnly?>("PatientBirthdate")
                        .HasColumnType("date")
                        .HasColumnName("patient_birthdate");

                    b.Property<int?>("PatientBloodtype")
                        .HasColumnType("int")
                        .HasColumnName("patient_bloodtype");

                    b.Property<string>("PatientCellularPhone")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("patient_cellular_phone");

                    b.Property<string>("PatientCode")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("patient_code");

                    b.Property<string>("PatientCompany")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("patient_company");

                    b.Property<DateTime?>("PatientCreationdate")
                        .HasColumnType("datetime")
                        .HasColumnName("patient_creationdate");

                    b.Property<int?>("PatientCreationuser")
                        .HasColumnType("int")
                        .HasColumnName("patient_creationuser");

                    b.Property<string>("PatientDocumentnumber")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("patient_documentnumber");

                    b.Property<int?>("PatientDocumenttype")
                        .HasColumnType("int")
                        .HasColumnName("patient_documenttype");

                    b.Property<string>("PatientDonor")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("patient_donor");

                    b.Property<string>("PatientEmail")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("patient_email");

                    b.Property<string>("PatientFirstname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("patient_firstname");

                    b.Property<string>("PatientFirstsurname")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("patient_firstsurname");

                    b.Property<int?>("PatientGender")
                        .HasColumnType("int")
                        .HasColumnName("patient_gender");

                    b.Property<int?>("PatientHealtInsurance")
                        .HasColumnType("int")
                        .HasColumnName("patient_healt_insurance");

                    b.Property<string>("PatientLandlinePhone")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("patient_landline_phone");

                    b.Property<int?>("PatientMaritalstatus")
                        .HasColumnType("int")
                        .HasColumnName("patient_maritalstatus");

                    b.Property<string>("PatientMiddlename")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("patient_middlename");

                    b.Property<DateTime?>("PatientModificationdate")
                        .HasColumnType("datetime")
                        .HasColumnName("patient_modificationdate");

                    b.Property<int?>("PatientModificationuser")
                        .HasColumnType("int")
                        .HasColumnName("patient_modificationuser");

                    b.Property<int?>("PatientNationality")
                        .HasColumnType("int")
                        .HasColumnName("patient_nationality");

                    b.Property<string>("PatientOcupation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("patient_ocupation");

                    b.Property<int?>("PatientProvince")
                        .HasColumnType("int")
                        .HasColumnName("patient_province");

                    b.Property<string>("PatientSecondlastname")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("patient_secondlastname");

                    b.Property<int>("PatientStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("patient_status");

                    b.Property<int?>("PatientVocationalTraining")
                        .HasColumnType("int")
                        .HasColumnName("patient_vocational_training");

                    b.HasKey("PatientId")
                        .HasName("PK__patient__4D5CE4766CB5056D");

                    b.HasIndex("PatientBloodtype");

                    b.HasIndex("PatientCreationuser");

                    b.HasIndex("PatientDocumenttype");

                    b.HasIndex("PatientGender");

                    b.HasIndex("PatientHealtInsurance");

                    b.HasIndex("PatientMaritalstatus");

                    b.HasIndex("PatientModificationuser");

                    b.HasIndex("PatientNationality");

                    b.HasIndex("PatientProvince");

                    b.HasIndex("PatientVocationalTraining");

                    b.ToTable("patient", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.PhysicalExamination", b =>
                {
                    b.Property<int>("PhysicalexaminationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("physicalexamination_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhysicalexaminationId"));

                    b.Property<bool?>("PhysicalexaminationAbdomen")
                        .HasColumnType("bit")
                        .HasColumnName("physicalexamination_abdomen");

                    b.Property<string>("PhysicalexaminationAbdomenObs")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("physicalexamination_abdomen_obs");

                    b.Property<bool?>("PhysicalexaminationChest")
                        .HasColumnType("bit")
                        .HasColumnName("physicalexamination_chest");

                    b.Property<string>("PhysicalexaminationChestObs")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("physicalexamination_chest_obs");

                    b.Property<int?>("PhysicalexaminationConsultationid")
                        .HasColumnType("int")
                        .HasColumnName("physicalexamination_consultationid");

                    b.Property<bool?>("PhysicalexaminationHead")
                        .HasColumnType("bit")
                        .HasColumnName("physicalexamination_head");

                    b.Property<string>("PhysicalexaminationHeadObs")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("physicalexamination_head_obs");

                    b.Property<bool?>("PhysicalexaminationLimbs")
                        .HasColumnType("bit")
                        .HasColumnName("physicalexamination_limbs");

                    b.Property<string>("PhysicalexaminationLimbsObs")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("physicalexamination_limbs_obs");

                    b.Property<bool?>("PhysicalexaminationNeck")
                        .HasColumnType("bit")
                        .HasColumnName("physicalexamination_neck");

                    b.Property<string>("PhysicalexaminationNeckObs")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("physicalexamination_neck_obs");

                    b.Property<bool?>("PhysicalexaminationPelvis")
                        .HasColumnType("bit")
                        .HasColumnName("physicalexamination_pelvis");

                    b.Property<string>("PhysicalexaminationPelvisObs")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("physicalexamination_pelvis_obs");

                    b.HasKey("PhysicalexaminationId")
                        .HasName("PK__physical__3846C7A7B8AE3C81");

                    b.HasIndex("PhysicalexaminationConsultationid");

                    b.ToTable("physical_examination", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.Profile", b =>
                {
                    b.Property<int>("ProfileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("profile_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProfileId"));

                    b.Property<string>("ProfileDescription")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("profile_description");

                    b.Property<string>("ProfileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("profile_name");

                    b.Property<int>("ProfileStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("profile_status");

                    b.HasKey("ProfileId")
                        .HasName("PK__profiles__AEBB701F14359BCE");

                    b.ToTable("profiles", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.Province", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("province_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProvinceId"));

                    b.Property<string>("ProvinceCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("province_code");

                    b.Property<int?>("ProvinceCountryid")
                        .HasColumnType("int")
                        .HasColumnName("province_countryid");

                    b.Property<string>("ProvinceDemony")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("province_demony");

                    b.Property<string>("ProvinceIso")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("province_iso");

                    b.Property<string>("ProvinceName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("province_name");

                    b.Property<string>("ProvincePrefix")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("province_prefix");

                    b.Property<int>("ProvinceStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("province_status");

                    b.HasKey("ProvinceId")
                        .HasName("PK__province__08DCB60F47592316");

                    b.HasIndex("ProvinceCountryid");

                    b.ToTable("provinces", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.Speciality", b =>
                {
                    b.Property<int>("SpecialityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("speciality_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SpecialityId"));

                    b.Property<string>("SpecialityCategory")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("speciality_category");

                    b.Property<string>("SpecialityName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("speciality_name");

                    b.Property<int?>("SpecialityStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("speciality_status");

                    b.Property<string>("SpecialtyDescription")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("specialty_description");

                    b.HasKey("SpecialityId")
                        .HasName("PK__speciali__E82ED62067BC73C0");

                    b.ToTable("specialities", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.SurgeriesConsultation", b =>
                {
                    b.Property<int>("SurgeriesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("surgeries_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SurgeriesId"));

                    b.Property<int?>("SurgeriesCatalogid")
                        .HasColumnType("int")
                        .HasColumnName("surgeries_catalogid");

                    b.Property<int?>("SurgeriesConsultationid")
                        .HasColumnType("int")
                        .HasColumnName("surgeries_consultationid");

                    b.Property<DateTime?>("SurgeriesCreationdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("surgeries_creationdate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("SurgeriesObservation")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("surgeries_observation");

                    b.Property<int?>("SurgeriesStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("surgeries_status");

                    b.HasKey("SurgeriesId")
                        .HasName("PK__surgerie__0D3E1F77EFA352D6");

                    b.HasIndex("SurgeriesCatalogid");

                    b.HasIndex("SurgeriesConsultationid");

                    b.ToTable("surgeries_consultation", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.User", b =>
                {
                    b.Property<int>("UsersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("users_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsersId"));

                    b.Property<string>("UsersAddress")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("users_address");

                    b.Property<int?>("UsersCountryid")
                        .HasColumnType("int")
                        .HasColumnName("users_countryid");

                    b.Property<DateTime?>("UsersCreationdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("users_creationdate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UsersDescription")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("users_description");

                    b.Property<string>("UsersDocumentNumber")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)")
                        .HasColumnName("users_document_number");

                    b.Property<string>("UsersEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("users_email");

                    b.Property<string>("UsersEstablishmentAddress")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("users_establishment_address");

                    b.Property<string>("UsersEstablishmentEmissionpoint")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("users_establishment_emissionpoint");

                    b.Property<string>("UsersEstablishmentName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("users_establishment_name");

                    b.Property<string>("UsersEstablishmentPointofsale")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("users_establishment_pointofsale");

                    b.Property<string>("UsersLogin")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("users_login");

                    b.Property<DateTime?>("UsersModificationdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasColumnName("users_modificationdate")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UsersNames")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("users_names");

                    b.Property<string>("UsersPassword")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("users_password");

                    b.Property<string>("UsersPhone")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("users_phone");

                    b.Property<int?>("UsersProfileid")
                        .HasColumnType("int")
                        .HasColumnName("users_profileid");

                    b.Property<byte[]>("UsersProfilephoto")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("users_profilephoto");

                    b.Property<string>("UsersProfilephoto64")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("users_profilephoto64");

                    b.Property<string>("UsersSenecytcode")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("users_senecytcode");

                    b.Property<int?>("UsersSequentialBilling")
                        .HasColumnType("int")
                        .HasColumnName("users_sequential_billing");

                    b.Property<int?>("UsersSpecialityid")
                        .HasColumnType("int")
                        .HasColumnName("users_specialityid");

                    b.Property<int?>("UsersStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("users_status");

                    b.Property<string>("UsersSurcenames")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("users_surcenames");

                    b.Property<int?>("UsersVatpercentageid")
                        .HasColumnType("int")
                        .HasColumnName("users_vatpercentageid");

                    b.Property<string>("UsersXkeytaxo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("users_xkeytaxo");

                    b.Property<string>("UsersXpasstaxo")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("users_xpasstaxo");

                    b.HasKey("UsersId")
                        .HasName("PK__users__EAA7D14B37748633");

                    b.HasIndex("UsersCountryid");

                    b.HasIndex("UsersProfileid");

                    b.HasIndex("UsersSpecialityid");

                    b.HasIndex("UsersVatpercentageid");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.UserSchedule", b =>
                {
                    b.Property<int>("SchudelsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("schudels_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SchudelsId"));

                    b.Property<int>("AppointmentInterval")
                        .HasColumnType("int")
                        .HasColumnName("appointment_interval");

                    b.Property<DateTime?>("CreateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("create_at");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time")
                        .HasColumnName("end_time");

                    b.Property<int?>("SchudelsStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("schudels_status");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time")
                        .HasColumnName("start_time");

                    b.Property<DateTime?>("UpdateAt")
                        .HasColumnType("datetime")
                        .HasColumnName("update_at");

                    b.Property<int>("UsersId")
                        .HasColumnType("int")
                        .HasColumnName("users_id");

                    b.HasKey("SchudelsId")
                        .HasName("PK__user_sch__0D64968B8934C57B");

                    b.ToTable("user_schedules", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.VatBilling", b =>
                {
                    b.Property<int>("VatbillingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("vatbilling_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VatbillingId"));

                    b.Property<string>("VatbillingCode")
                        .HasMaxLength(4)
                        .HasColumnType("nvarchar(4)")
                        .HasColumnName("vatbilling_code");

                    b.Property<string>("VatbillingPercentage")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("vatbilling_percentage");

                    b.Property<string>("VatbillingRate")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("vatbilling_rate");

                    b.Property<int?>("VatbillingStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(1)
                        .HasColumnName("vatbilling_status");

                    b.HasKey("VatbillingId")
                        .HasName("PK__vat_bill__B6D1E35EF0427F09");

                    b.ToTable("vat_billing", (string)null);
                });

            modelBuilder.Entity("ExpertMed.Models.AllergiesConsultation", b =>
                {
                    b.HasOne("ExpertMed.Models.Catalog", "AllergiesCatalog")
                        .WithMany("AllergiesConsultations")
                        .HasForeignKey("AllergiesCatalogid")
                        .IsRequired()
                        .HasConstraintName("FK_allergies_catalogid");

                    b.HasOne("ExpertMed.Models.Consultation", "AllergiesConsultationNavigation")
                        .WithMany("AllergiesConsultations")
                        .HasForeignKey("AllergiesConsultationid")
                        .HasConstraintName("FK_allergies_consultationid");

                    b.Navigation("AllergiesCatalog");

                    b.Navigation("AllergiesConsultationNavigation");
                });

            modelBuilder.Entity("ExpertMed.Models.Appointment", b =>
                {
                    b.HasOne("ExpertMed.Models.Consultation", "AppointmentConsultation")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentConsultationid")
                        .HasConstraintName("FK_appointment_consultationid");

                    b.HasOne("ExpertMed.Models.User", "AppointmentCreateuserNavigation")
                        .WithMany("AppointmentAppointmentCreateuserNavigations")
                        .HasForeignKey("AppointmentCreateuser")
                        .HasConstraintName("FK_appointment_createuser");

                    b.HasOne("ExpertMed.Models.User", "AppointmentModifyuserNavigation")
                        .WithMany("AppointmentAppointmentModifyuserNavigations")
                        .HasForeignKey("AppointmentModifyuser")
                        .HasConstraintName("FK_appointment_modifyuser");

                    b.HasOne("ExpertMed.Models.Patient", "AppointmentPatient")
                        .WithMany("Appointments")
                        .HasForeignKey("AppointmentPatientid")
                        .HasConstraintName("FK_appointment_patientid");

                    b.Navigation("AppointmentConsultation");

                    b.Navigation("AppointmentCreateuserNavigation");

                    b.Navigation("AppointmentModifyuserNavigation");

                    b.Navigation("AppointmentPatient");
                });

            modelBuilder.Entity("ExpertMed.Models.AssistantDoctorRelationship", b =>
                {
                    b.HasOne("ExpertMed.Models.User", "AssistantUser")
                        .WithMany("AssistantDoctorRelationshipAssistantUsers")
                        .HasForeignKey("AssistantUserid")
                        .HasConstraintName("FK_assistan_userid");

                    b.HasOne("ExpertMed.Models.User", "DoctorUser")
                        .WithMany("AssistantDoctorRelationshipDoctorUsers")
                        .HasForeignKey("DoctorUserid")
                        .HasConstraintName("FK_doctor_userid");

                    b.Navigation("AssistantUser");

                    b.Navigation("DoctorUser");
                });

            modelBuilder.Entity("ExpertMed.Models.Consultation", b =>
                {
                    b.HasOne("ExpertMed.Models.Patient", "ConsultationPatientNavigation")
                        .WithMany("Consultations")
                        .HasForeignKey("ConsultationPatient")
                        .IsRequired()
                        .HasConstraintName("FK_consultation_patient");

                    b.HasOne("ExpertMed.Models.Speciality", "ConsultationSpecialityNavigation")
                        .WithMany("Consultations")
                        .HasForeignKey("ConsultationSpeciality")
                        .HasConstraintName("FK_consultation_speciality");

                    b.HasOne("ExpertMed.Models.User", "ConsultationUsercreateNavigation")
                        .WithMany("Consultations")
                        .HasForeignKey("ConsultationUsercreate")
                        .HasConstraintName("FK_consultation_usercreate");

                    b.Navigation("ConsultationPatientNavigation");

                    b.Navigation("ConsultationSpecialityNavigation");

                    b.Navigation("ConsultationUsercreateNavigation");
                });

            modelBuilder.Entity("ExpertMed.Models.DiagnosisConsultation", b =>
                {
                    b.HasOne("ExpertMed.Models.Consultation", "DiagnosisConsultationNavigation")
                        .WithMany("DiagnosisConsultations")
                        .HasForeignKey("DiagnosisConsultationid")
                        .HasConstraintName("FK_diagnosis_consultationid");

                    b.HasOne("ExpertMed.Models.Diagnosis", "DiagnosisDiagnosis")
                        .WithMany("DiagnosisConsultations")
                        .HasForeignKey("DiagnosisDiagnosisid")
                        .HasConstraintName("FK_diagnosis_diagnosisid");

                    b.Navigation("DiagnosisConsultationNavigation");

                    b.Navigation("DiagnosisDiagnosis");
                });

            modelBuilder.Entity("ExpertMed.Models.DoctorPatient", b =>
                {
                    b.HasOne("ExpertMed.Models.User", "DoctorUser")
                        .WithMany("DoctorPatients")
                        .HasForeignKey("DoctorUserid")
                        .IsRequired()
                        .HasConstraintName("FK__doctor_pa__docto__607251E5");

                    b.HasOne("ExpertMed.Models.Patient", "Patient")
                        .WithMany("DoctorPatients")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("FK__doctor_pa__patie__6166761E");

                    b.Navigation("DoctorUser");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("ExpertMed.Models.FamiliaryBackground", b =>
                {
                    b.HasOne("ExpertMed.Models.Consultation", "FamiliaryBackgroundConsultation")
                        .WithMany("FamiliaryBackgrounds")
                        .HasForeignKey("FamiliaryBackgroundConsultationid")
                        .HasConstraintName("FK_familiary_background_consultationid");

                    b.HasOne("ExpertMed.Models.Catalog", "FamiliaryBackgroundRelatshTuberculosisNavigation")
                        .WithMany("FamiliaryBackgroundFamiliaryBackgroundRelatshTuberculosisNavigations")
                        .HasForeignKey("FamiliaryBackgroundRelatshTuberculosis")
                        .HasConstraintName("FK_familiary_background_relatsh_tuberculosis");

                    b.HasOne("ExpertMed.Models.Catalog", "FamiliaryBackgroundRelatshcatalogCancerNavigation")
                        .WithMany("FamiliaryBackgroundFamiliaryBackgroundRelatshcatalogCancerNavigations")
                        .HasForeignKey("FamiliaryBackgroundRelatshcatalogCancer")
                        .HasConstraintName("FK_familiary_background_relatshcatalog_cancer");

                    b.HasOne("ExpertMed.Models.Catalog", "FamiliaryBackgroundRelatshcatalogDiabetesNavigation")
                        .WithMany("FamiliaryBackgroundFamiliaryBackgroundRelatshcatalogDiabetesNavigations")
                        .HasForeignKey("FamiliaryBackgroundRelatshcatalogDiabetes")
                        .HasConstraintName("FK_familiary_background_relatshcatalog_diabetes");

                    b.HasOne("ExpertMed.Models.Catalog", "FamiliaryBackgroundRelatshcatalogDxcardiovascularNavigation")
                        .WithMany("FamiliaryBackgroundFamiliaryBackgroundRelatshcatalogDxcardiovascularNavigations")
                        .HasForeignKey("FamiliaryBackgroundRelatshcatalogDxcardiovascular")
                        .HasConstraintName("FK_familiary_background_relatshcatalog_dxcardiovascular");

                    b.HasOne("ExpertMed.Models.Catalog", "FamiliaryBackgroundRelatshcatalogDxinfectiousNavigation")
                        .WithMany("FamiliaryBackgroundFamiliaryBackgroundRelatshcatalogDxinfectiousNavigations")
                        .HasForeignKey("FamiliaryBackgroundRelatshcatalogDxinfectious")
                        .HasConstraintName("FK_familiary_background_relatshcatalog_dxinfectious");

                    b.HasOne("ExpertMed.Models.Catalog", "FamiliaryBackgroundRelatshcatalogDxmentalNavigation")
                        .WithMany("FamiliaryBackgroundFamiliaryBackgroundRelatshcatalogDxmentalNavigations")
                        .HasForeignKey("FamiliaryBackgroundRelatshcatalogDxmental")
                        .HasConstraintName("FK_familiary_background_relatshcatalog_dxmental");

                    b.HasOne("ExpertMed.Models.Catalog", "FamiliaryBackgroundRelatshcatalogHeartdiseaseNavigation")
                        .WithMany("FamiliaryBackgroundFamiliaryBackgroundRelatshcatalogHeartdiseaseNavigations")
                        .HasForeignKey("FamiliaryBackgroundRelatshcatalogHeartdisease")
                        .HasConstraintName("FK_familiary_background_relatshcatalog_heartdisease");

                    b.HasOne("ExpertMed.Models.Catalog", "FamiliaryBackgroundRelatshcatalogHypertensionNavigation")
                        .WithMany("FamiliaryBackgroundFamiliaryBackgroundRelatshcatalogHypertensionNavigations")
                        .HasForeignKey("FamiliaryBackgroundRelatshcatalogHypertension")
                        .HasConstraintName("FK_familiary_background_relatshcatalog_hypertension");

                    b.HasOne("ExpertMed.Models.Catalog", "FamiliaryBackgroundRelatshcatalogMalformationNavigation")
                        .WithMany("FamiliaryBackgroundFamiliaryBackgroundRelatshcatalogMalformationNavigations")
                        .HasForeignKey("FamiliaryBackgroundRelatshcatalogMalformation")
                        .HasConstraintName("FK_familiary_background_relatshcatalog_malformation");

                    b.HasOne("ExpertMed.Models.Catalog", "FamiliaryBackgroundRelatshcatalogOtherNavigation")
                        .WithMany("FamiliaryBackgroundFamiliaryBackgroundRelatshcatalogOtherNavigations")
                        .HasForeignKey("FamiliaryBackgroundRelatshcatalogOther")
                        .HasConstraintName("FK_familiary_background_relatshcatalog_other");

                    b.Navigation("FamiliaryBackgroundConsultation");

                    b.Navigation("FamiliaryBackgroundRelatshTuberculosisNavigation");

                    b.Navigation("FamiliaryBackgroundRelatshcatalogCancerNavigation");

                    b.Navigation("FamiliaryBackgroundRelatshcatalogDiabetesNavigation");

                    b.Navigation("FamiliaryBackgroundRelatshcatalogDxcardiovascularNavigation");

                    b.Navigation("FamiliaryBackgroundRelatshcatalogDxinfectiousNavigation");

                    b.Navigation("FamiliaryBackgroundRelatshcatalogDxmentalNavigation");

                    b.Navigation("FamiliaryBackgroundRelatshcatalogHeartdiseaseNavigation");

                    b.Navigation("FamiliaryBackgroundRelatshcatalogHypertensionNavigation");

                    b.Navigation("FamiliaryBackgroundRelatshcatalogMalformationNavigation");

                    b.Navigation("FamiliaryBackgroundRelatshcatalogOtherNavigation");
                });

            modelBuilder.Entity("ExpertMed.Models.ImagesConsutlation", b =>
                {
                    b.HasOne("ExpertMed.Models.Consultation", "ImagesConsultation")
                        .WithMany("ImagesConsutlations")
                        .HasForeignKey("ImagesConsultationid")
                        .HasConstraintName("FK_images_consultationid");

                    b.HasOne("ExpertMed.Models.Image", "ImagesImages")
                        .WithMany("ImagesConsutlations")
                        .HasForeignKey("ImagesImagesid")
                        .HasConstraintName("FK_images_imagesid");

                    b.Navigation("ImagesConsultation");

                    b.Navigation("ImagesImages");
                });

            modelBuilder.Entity("ExpertMed.Models.LaboratoriesConsultation", b =>
                {
                    b.HasOne("ExpertMed.Models.Consultation", "LaboratoriesConsultationNavigation")
                        .WithMany("LaboratoriesConsultations")
                        .HasForeignKey("LaboratoriesConsultationid")
                        .HasConstraintName("FK_laboratories_consultationid");

                    b.HasOne("ExpertMed.Models.Laboratory", "LaboratoriesLaboratories")
                        .WithMany("LaboratoriesConsultations")
                        .HasForeignKey("LaboratoriesLaboratoriesid")
                        .HasConstraintName("FK_laboratories_laboratoriesid");

                    b.Navigation("LaboratoriesConsultationNavigation");

                    b.Navigation("LaboratoriesLaboratories");
                });

            modelBuilder.Entity("ExpertMed.Models.MedicationsConsultation", b =>
                {
                    b.HasOne("ExpertMed.Models.Consultation", "MedicationsConsultationNavigation")
                        .WithMany("MedicationsConsultations")
                        .HasForeignKey("MedicationsConsultationid")
                        .HasConstraintName("FK_medications_consultationid");

                    b.HasOne("ExpertMed.Models.Medication", "MedicationsMedications")
                        .WithMany("MedicationsConsultations")
                        .HasForeignKey("MedicationsMedicationsid")
                        .HasConstraintName("FK_medications_medicationsid");

                    b.Navigation("MedicationsConsultationNavigation");

                    b.Navigation("MedicationsMedications");
                });

            modelBuilder.Entity("ExpertMed.Models.OrgansSystem", b =>
                {
                    b.HasOne("ExpertMed.Models.Consultation", "OrganssystemsConsultation")
                        .WithMany("OrgansSystems")
                        .HasForeignKey("OrganssystemsConsultationid")
                        .HasConstraintName("FK_organssystems_consultationid");

                    b.Navigation("OrganssystemsConsultation");
                });

            modelBuilder.Entity("ExpertMed.Models.Patient", b =>
                {
                    b.HasOne("ExpertMed.Models.Catalog", "PatientBloodtypeNavigation")
                        .WithMany("PatientPatientBloodtypeNavigations")
                        .HasForeignKey("PatientBloodtype")
                        .HasConstraintName("FK_patient_bloodtype");

                    b.HasOne("ExpertMed.Models.User", "PatientCreationuserNavigation")
                        .WithMany("PatientPatientCreationuserNavigations")
                        .HasForeignKey("PatientCreationuser")
                        .HasConstraintName("FK_patient_creationuser");

                    b.HasOne("ExpertMed.Models.Catalog", "PatientDocumenttypeNavigation")
                        .WithMany("PatientPatientDocumenttypeNavigations")
                        .HasForeignKey("PatientDocumenttype")
                        .HasConstraintName("FK_patient_documenttype");

                    b.HasOne("ExpertMed.Models.Catalog", "PatientGenderNavigation")
                        .WithMany("PatientPatientGenderNavigations")
                        .HasForeignKey("PatientGender")
                        .HasConstraintName("FK_patient_gender");

                    b.HasOne("ExpertMed.Models.Catalog", "PatientHealtInsuranceNavigation")
                        .WithMany("PatientPatientHealtInsuranceNavigations")
                        .HasForeignKey("PatientHealtInsurance")
                        .HasConstraintName("FK_patient_healt_insurance");

                    b.HasOne("ExpertMed.Models.Catalog", "PatientMaritalstatusNavigation")
                        .WithMany("PatientPatientMaritalstatusNavigations")
                        .HasForeignKey("PatientMaritalstatus")
                        .HasConstraintName("FK_patient_maritalstatus");

                    b.HasOne("ExpertMed.Models.User", "PatientModificationuserNavigation")
                        .WithMany("PatientPatientModificationuserNavigations")
                        .HasForeignKey("PatientModificationuser")
                        .HasConstraintName("FK_patient_modificationuser");

                    b.HasOne("ExpertMed.Models.Country", "PatientNationalityNavigation")
                        .WithMany("Patients")
                        .HasForeignKey("PatientNationality")
                        .HasConstraintName("FK_patient_nationality");

                    b.HasOne("ExpertMed.Models.Catalog", "PatientProvinceNavigation")
                        .WithMany("PatientPatientProvinceNavigations")
                        .HasForeignKey("PatientProvince")
                        .HasConstraintName("FK_patient_province");

                    b.HasOne("ExpertMed.Models.Catalog", "PatientVocationalTrainingNavigation")
                        .WithMany("PatientPatientVocationalTrainingNavigations")
                        .HasForeignKey("PatientVocationalTraining")
                        .HasConstraintName("FK_patient_vocational_training");

                    b.Navigation("PatientBloodtypeNavigation");

                    b.Navigation("PatientCreationuserNavigation");

                    b.Navigation("PatientDocumenttypeNavigation");

                    b.Navigation("PatientGenderNavigation");

                    b.Navigation("PatientHealtInsuranceNavigation");

                    b.Navigation("PatientMaritalstatusNavigation");

                    b.Navigation("PatientModificationuserNavigation");

                    b.Navigation("PatientNationalityNavigation");

                    b.Navigation("PatientProvinceNavigation");

                    b.Navigation("PatientVocationalTrainingNavigation");
                });

            modelBuilder.Entity("ExpertMed.Models.PhysicalExamination", b =>
                {
                    b.HasOne("ExpertMed.Models.Consultation", "PhysicalexaminationConsultation")
                        .WithMany("PhysicalExaminations")
                        .HasForeignKey("PhysicalexaminationConsultationid")
                        .HasConstraintName("FK_physicalexamination_consultationid");

                    b.Navigation("PhysicalexaminationConsultation");
                });

            modelBuilder.Entity("ExpertMed.Models.Province", b =>
                {
                    b.HasOne("ExpertMed.Models.Country", "ProvinceCountry")
                        .WithMany("Provinces")
                        .HasForeignKey("ProvinceCountryid")
                        .HasConstraintName("FK_province_countryid");

                    b.Navigation("ProvinceCountry");
                });

            modelBuilder.Entity("ExpertMed.Models.SurgeriesConsultation", b =>
                {
                    b.HasOne("ExpertMed.Models.Catalog", "SurgeriesCatalog")
                        .WithMany("SurgeriesConsultations")
                        .HasForeignKey("SurgeriesCatalogid")
                        .HasConstraintName("FK_surgeries_catalogid");

                    b.HasOne("ExpertMed.Models.Consultation", "SurgeriesConsultationNavigation")
                        .WithMany("SurgeriesConsultations")
                        .HasForeignKey("SurgeriesConsultationid")
                        .HasConstraintName("FK_surgeries_consultationid");

                    b.Navigation("SurgeriesCatalog");

                    b.Navigation("SurgeriesConsultationNavigation");
                });

            modelBuilder.Entity("ExpertMed.Models.User", b =>
                {
                    b.HasOne("ExpertMed.Models.Country", "UsersCountry")
                        .WithMany("Users")
                        .HasForeignKey("UsersCountryid")
                        .HasConstraintName("FK_users_countryid");

                    b.HasOne("ExpertMed.Models.Profile", "UsersProfile")
                        .WithMany("Users")
                        .HasForeignKey("UsersProfileid")
                        .HasConstraintName("FK_users_profileid");

                    b.HasOne("ExpertMed.Models.Speciality", "UsersSpeciality")
                        .WithMany("Users")
                        .HasForeignKey("UsersSpecialityid")
                        .HasConstraintName("FK_users_specialityid");

                    b.HasOne("ExpertMed.Models.VatBilling", "UsersVatpercentage")
                        .WithMany("Users")
                        .HasForeignKey("UsersVatpercentageid")
                        .HasConstraintName("FK_users_vatpercentageid");

                    b.Navigation("UsersCountry");

                    b.Navigation("UsersProfile");

                    b.Navigation("UsersSpeciality");

                    b.Navigation("UsersVatpercentage");
                });

            modelBuilder.Entity("ExpertMed.Models.Catalog", b =>
                {
                    b.Navigation("AllergiesConsultations");

                    b.Navigation("FamiliaryBackgroundFamiliaryBackgroundRelatshTuberculosisNavigations");

                    b.Navigation("FamiliaryBackgroundFamiliaryBackgroundRelatshcatalogCancerNavigations");

                    b.Navigation("FamiliaryBackgroundFamiliaryBackgroundRelatshcatalogDiabetesNavigations");

                    b.Navigation("FamiliaryBackgroundFamiliaryBackgroundRelatshcatalogDxcardiovascularNavigations");

                    b.Navigation("FamiliaryBackgroundFamiliaryBackgroundRelatshcatalogDxinfectiousNavigations");

                    b.Navigation("FamiliaryBackgroundFamiliaryBackgroundRelatshcatalogDxmentalNavigations");

                    b.Navigation("FamiliaryBackgroundFamiliaryBackgroundRelatshcatalogHeartdiseaseNavigations");

                    b.Navigation("FamiliaryBackgroundFamiliaryBackgroundRelatshcatalogHypertensionNavigations");

                    b.Navigation("FamiliaryBackgroundFamiliaryBackgroundRelatshcatalogMalformationNavigations");

                    b.Navigation("FamiliaryBackgroundFamiliaryBackgroundRelatshcatalogOtherNavigations");

                    b.Navigation("PatientPatientBloodtypeNavigations");

                    b.Navigation("PatientPatientDocumenttypeNavigations");

                    b.Navigation("PatientPatientGenderNavigations");

                    b.Navigation("PatientPatientHealtInsuranceNavigations");

                    b.Navigation("PatientPatientMaritalstatusNavigations");

                    b.Navigation("PatientPatientProvinceNavigations");

                    b.Navigation("PatientPatientVocationalTrainingNavigations");

                    b.Navigation("SurgeriesConsultations");
                });

            modelBuilder.Entity("ExpertMed.Models.Consultation", b =>
                {
                    b.Navigation("AllergiesConsultations");

                    b.Navigation("Appointments");

                    b.Navigation("DiagnosisConsultations");

                    b.Navigation("FamiliaryBackgrounds");

                    b.Navigation("ImagesConsutlations");

                    b.Navigation("LaboratoriesConsultations");

                    b.Navigation("MedicationsConsultations");

                    b.Navigation("OrgansSystems");

                    b.Navigation("PhysicalExaminations");

                    b.Navigation("SurgeriesConsultations");
                });

            modelBuilder.Entity("ExpertMed.Models.Country", b =>
                {
                    b.Navigation("Patients");

                    b.Navigation("Provinces");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ExpertMed.Models.Diagnosis", b =>
                {
                    b.Navigation("DiagnosisConsultations");
                });

            modelBuilder.Entity("ExpertMed.Models.Image", b =>
                {
                    b.Navigation("ImagesConsutlations");
                });

            modelBuilder.Entity("ExpertMed.Models.Laboratory", b =>
                {
                    b.Navigation("LaboratoriesConsultations");
                });

            modelBuilder.Entity("ExpertMed.Models.Medication", b =>
                {
                    b.Navigation("MedicationsConsultations");
                });

            modelBuilder.Entity("ExpertMed.Models.Patient", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Consultations");

                    b.Navigation("DoctorPatients");
                });

            modelBuilder.Entity("ExpertMed.Models.Profile", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ExpertMed.Models.Speciality", b =>
                {
                    b.Navigation("Consultations");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ExpertMed.Models.User", b =>
                {
                    b.Navigation("AppointmentAppointmentCreateuserNavigations");

                    b.Navigation("AppointmentAppointmentModifyuserNavigations");

                    b.Navigation("AssistantDoctorRelationshipAssistantUsers");

                    b.Navigation("AssistantDoctorRelationshipDoctorUsers");

                    b.Navigation("Consultations");

                    b.Navigation("DoctorPatients");

                    b.Navigation("PatientPatientCreationuserNavigations");

                    b.Navigation("PatientPatientModificationuserNavigations");
                });

            modelBuilder.Entity("ExpertMed.Models.VatBilling", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
